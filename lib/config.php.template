<?php

error_reporting(E_ALL);

error_log('************************************');
error_log($_SERVER['REQUEST_URI']);

define('DEBUG', true);
define('ROOT', '/srv/tendril/');

require_once ROOT . 'lib/cache.php';
require_once ROOT . 'lib/sql.php';
require_once ROOT . 'lib/search.php';
require_once ROOT . 'lib/record.php';
require_once ROOT . 'lib/user.php';
require_once ROOT . 'lib/utility.php';

date_default_timezone_set('UTC');

set_error_handler(

    function($errno, $message, $file, $line, $context)
    {
        if ($errno === E_WARNING) {
            backtrace();
        }
        return false;
    }
);

function db()
{
    static $db = null;
    if (is_null($db) || !is_resource($db))
    {
        $db = mysql_connect('host', 'user', 'pass')
            or die('database'); mysql_select_db('user');
    }
    return $db;
}

db();

function mc()
{
    static $mc = null;
    if (class_exists('Memcache'))
    {
        $mc = new Memcache();
        if (!$mc->addServer('host'))
            $mc = null;
    }
    return $mc;
}

mc();

session_set_save_handler(

    // open
    function ($path, $name) {
        return mysql_ping();
    },
    // close
    function () {
        return true;
    },
    // read
    function ($id) {
        error_log("(memcached) session read $id");
        return mc()->get($id);
    },
    // write
    function ($id, $data) {
        error_log("(memcached) session save $id");
        mc()->set($id, $data, 0, 86400);
    },
    // destroy
    function ($id) {
    },
    // gc
    function ($maxlife) {
        // see close
    }
);

// php destroys objects and classes before writing the session
// trigger the write before said cleanup
register_shutdown_function('session_write_close');

ob_start('ob_gzhandler');
session_start();



require_once ROOT .'lib/host.php';
